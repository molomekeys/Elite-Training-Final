// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id    String @id @default(cuid())
    name  String
    email String @unique

    image          String?
    password       String
    role           String
    phone_number   String
    coach_table    Client?
    client_table   Coach?
    password_reset String? @default("null")
    isPaidCustomer Boolean @default(false)
}

model Coach {
    id              Int      @id @default(autoincrement())
    numero_siren    String
    licence_sportif String?
    coach_id        String   @unique
    created_at      DateTime @default(now())
    UserIdCoach     User     @relation(fields: [coach_id], references: [id])
    client          Client[]
    Events          Events[]

    @@index(coach_id)
}

model Client {
    id           Int           @id @default(autoincrement())
    coach_id     String?
    user_id      String        @unique
    created_at   DateTime      @default(now())
    coachId      Coach?        @relation(fields: [coach_id], references: [coach_id])
    UserIdPrisma User          @relation(fields: [user_id], references: [id])
    Profil       ClientProfil?
    event        Events[]

    @@index(user_id)
    @@index(coach_id)
}

model ClientProfil {
    id           Int    @id @default(autoincrement())
    age          Int
    weight       Int
    client_id    Int    @unique
    useridprisma Client @relation(fields: [client_id], references: [id])

    @@index(client_id)
}

model Events {
    id                 Int      @id @default(autoincrement())
    start              DateTime
    end                DateTime
    coach_id           Int      @unique
    client_id          Int      @unique
    salle              String
    hours              BigInt
    isPaid             Boolean  @default(false)
    type_offer         BigInt   @unique
    useridprismaClient Client   @relation(fields: [client_id], references: [id])
    UserIdCoach        Coach    @relation(fields: [coach_id], references: [id])
}

model AvailablePlace {
    id                  Int        @id @default(autoincrement())
    room_name           String
    adresse             String?
    phone_Number        String?
    email               String?
    related_offer       Int
    related_offerPrisma OfferTable @relation(fields: [related_offer], references: [id])

    @@index(related_offer)
}

model OfferTable {
    id              Int              @id @default(autoincrement())
    name            String
    available_place AvailablePlace[]
    pricing_offer   PriceTable[]
}

model PriceTable {
    id            Int         @id @default(autoincrement())
    stripe_id     String
    seance_week   String
    coach_price   Float
    client_price  Float
    type_offert   String
    offer_id      Int?
    prismaOfferId OfferTable? @relation(fields: [offer_id], references: [id])

    @@index(offer_id)
}
